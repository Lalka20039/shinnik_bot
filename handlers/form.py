from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import logging
import re
from datetime import datetime  # –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞

from keyboards.menu import main_menu
from keyboards.catalog import category_keyboard, car_tires, truck_tires, agro_tires
from database.db import insert_order
from config import MANAGER_CHAT_ID

form_router = Router()

class OrderForm(StatesGroup):
    name = State()
    phone = State()
    category = State()
    model = State()

VALID_MODELS = {
    "–õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã": [
        "–õ–µ–≥–∫–æ–≤–∞—è —à–∏–Ω–∞ Forward Safari 510",
        "–õ–µ–≥–∫–æ–≤–∞—è —à–∏–Ω–∞ –ö–∞–º–∞ Breeze 185/65R14",
        "–õ–µ–≥–∫–æ–≤–∞—è —à–∏–Ω–∞ Cordiant Comfort 2 205/55R16"
    ],
    "–ì—Ä—É–∑–æ–≤—ã–µ —à–∏–Ω—ã": [
        "–ì—Ä—É–∑–æ–≤–∞—è —à–∏–Ω–∞ –ö–∞–º–∞-310 12.00R20",
        "–ì—Ä—É–∑–æ–≤–∞—è —à–∏–Ω–∞ –ö–∞–º–∞ 10.00R20 –ò-281 –£-4",
        "–ì—Ä—É–∑–æ–≤–∞—è —à–∏–Ω–∞ –ö–∞–º–∞ NT 202 215/75R17.5"
    ],
    "–°–µ–ª—å—Ö–æ–∑—à–∏–Ω—ã": [
        "–°–µ–ª—å—Ö–æ–∑—à–∏–Ω–∞ –ö–∞–º–∞ 15.5R38 –§-2–ê",
        "–°–µ–ª—å—Ö–æ–∑—à–∏–Ω–∞ –ê–ª—Ç–∞–π—à–∏–Ω–∞ 15.5-38 –§-2–ê–î",
        "–°–µ–ª—å—Ö–æ–∑—à–∏–Ω–∞ –í–æ–ª—Ç–∞–∏—Ä –Ø-324 16.9R38"
    ]
}

@form_router.message(F.text == "üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderForm.name)

@form_router.message(OrderForm.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")
    await state.set_state(OrderForm.phone)

@form_router.message(OrderForm.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    cleaned_phone = re.sub(r'[^\d+]', '', phone)
    
    if not re.match(r'^\+\d{10,14}$', cleaned_phone):
        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone} (–æ—á–∏—â–µ–Ω–æ: {cleaned_phone})")
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567). "
            "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 14 —Ü–∏—Ñ—Ä."
        )
        return
    
    await state.update_data(phone=cleaned_phone)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∏–Ω:", reply_markup=category_keyboard)
    await state.set_state(OrderForm.category)

@form_router.message(OrderForm.category)
async def get_category(message: Message, state: FSMContext):
    if message.text not in ["–õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã", "–ì—Ä—É–∑–æ–≤—ã–µ —à–∏–Ω—ã", "–°–µ–ª—å—Ö–æ–∑—à–∏–Ω—ã"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return
    
    await state.update_data(category=message.text)
    
    if message.text == "–õ–µ–≥–∫–æ–≤—ã–µ —à–∏–Ω—ã":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ª–µ–≥–∫–æ–≤—ã—Ö —à–∏–Ω:", reply_markup=car_tires)
    elif message.text == "–ì—Ä—É–∑–æ–≤—ã–µ —à–∏–Ω—ã":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≥—Ä—É–∑–æ–≤—ã—Ö —à–∏–Ω:", reply_markup=truck_tires)
    elif message.text == "–°–µ–ª—å—Ö–æ–∑—à–∏–Ω—ã":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–µ–ª—å—Ö–æ–∑—à–∏–Ω:", reply_markup=agro_tires)
    
    await state.set_state(OrderForm.model)

@form_router.message(OrderForm.model, F.text.in_(sum(VALID_MODELS.values(), [])))
async def get_model(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    category = data.get("category")
    
    if message.text not in VALID_MODELS.get(category, []):
        logging.warning(f"–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {message.text} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
        return
    
    await state.update_data(model=message.text)
    data = await state.get_data()

    try:
        insert_order(
            user_id=message.from_user.id,
            user_name=data["name"],
            phone=data["phone"],
            vehicle_type=data["category"],
            model=data["model"]
        )
        logging.info(f"–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: user_id={message.from_user.id}, model={data['model']}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
        order_message = (
            f"üìú –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"f"–ò–º—è: {data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
            f"–ú–æ–¥–µ–ª—å: {data['model']}\n"
            f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        await bot.send_message(chat_id=MANAGER_CHAT_ID, text=order_message)
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {MANAGER_CHAT_ID}")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
            f"–ò–º—è: {data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
            f"–ú–æ–¥–µ–ª—å: {data['model']}",
            reply_markup=main_menu
        )
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@form_router.message(OrderForm.model, F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def back_to_category(message: Message, state: FSMContext):
    await state.update_data(category=None)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–∏–Ω:", reply_markup=category_keyboard)
    await state.set_state(OrderForm.category)

@form_router.message(OrderForm.model, F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_order_in_model_state(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.")
    await state.clear()
    await message.answer(
        "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
        reply_markup=main_menu
    )

@form_router.message(OrderForm.model)
async def invalid_model(message: Message, state: FSMContext):
    logging.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {message.text}")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")

@form_router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_order(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑.")
    await state.clear()
    await message.answer(
        "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
        reply_markup=main_menu
    )